name: Pulumi Infrastructure Deployment

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering for testing

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required for checkout
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Configure ESC Environment
        id: esc
        uses: pulumi/esc-action@v1.5.0
        with:
          environment: default/knock-lambda-esc

      - name: Determine Stack Name
        id: stack
        run: |
          # For releases, use the target branch
          # For manual runs, use the current branch
          if [ "${{ github.event_name }}" = "release" ]; then
            BRANCH_NAME="${{ github.event.release.target_commitish }}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi

          STACK_NAME="$BRANCH_NAME"
          echo "stack_name=${{ github.repository }}/$STACK_NAME" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Deploying to stack: ${{ github.repository }}/$STACK_NAME"
          echo "Branch: $BRANCH_NAME"

      - name: Get OIDC Role ARN
        id: oidc
        run: |
          # Get the GitHub Actions OIDC role ARN for this stack
          ROLE_ARN=$(pulumi stack output github_actions_role_arn --stack ${{ steps.stack.outputs.stack_name }})
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT
          echo "Using OIDC Role: $ROLE_ARN"

      - name: Debug OIDC Context
        run: |
          echo "🔍 GitHub Actions OIDC Context Debug:"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Expected sub: repo:${{ github.repository }}:ref:${{ github.ref }}"
          echo "Expected role: ${{ steps.oidc.outputs.role_arn }}"

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.oidc.outputs.role_arn }}
          role-session-name: GitHubActions-PulumiDeploy
          aws-region: us-east-2

      - name: Pulumi Up
        uses: pulumi/actions@v6.6.0
        id: pulumi
        with:
          command: up
          stack-name: ${{ steps.stack.outputs.stack_name }}

      - name: Generate Job Summary
        if: always()
        run: |
          echo "## 🚀 Pulumi Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Stack:** \`${{ steps.stack.outputs.stack_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${GITHUB_REF#refs/heads/}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get stack outputs
          OUTPUTS=$(pulumi stack output --json --stack ${{ steps.stack.outputs.stack_name }} 2>/dev/null || echo "{}")

          if [ "$OUTPUTS" != "{}" ]; then
              echo "### 📦 Stack Outputs" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Output | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
              
              # Parse JSON outputs and create table rows
              echo "$OUTPUTS" | jq -r 'to_entries | .[] | "| `\(.key)` | `\(.value)` |"' >> $GITHUB_STEP_SUMMARY
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "---" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Add quick links if function_url exists
              FUNCTION_URL=$(echo "$OUTPUTS" | jq -r '.function_url // empty')
              if [ -n "$FUNCTION_URL" ]; then
                  echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- [Lambda Function URL]($FUNCTION_URL)" >> $GITHUB_STEP_SUMMARY
                  echo "- [Pulumi Console](https://app.pulumi.com/${{ github.repository }}/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
              fi
          else
              echo "No outputs available for this stack." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Save Outputs to GitHub Variables
        if: success()
        env:
          GH_TOKEN: ${{ steps.esc.outputs.VARIABLE_EDITING_PAT }}
        run: |
          BRANCH_NAME="${{ steps.stack.outputs.branch_name }}"

          # Get stack outputs
          OUTPUTS=$(pulumi stack output --json --stack ${{ steps.stack.outputs.stack_name }} 2>/dev/null || echo "{}")

          # Extract key outputs
          FUNCTION_URL=$(echo "$OUTPUTS" | jq -r '.function_url // empty')
          CODEBUILD_PROJECT_NAME=$(echo "$OUTPUTS" | jq -r '.codebuild_project_name // empty')
          LAMBDA_FUNCTION_NAME=$(echo "$OUTPUTS" | jq -r '.lambda_function_name // empty')
          ECR_REPOSITORY_URL=$(echo "$OUTPUTS" | jq -r '.ecr_repository_url // empty')

          # Save as repository variables with branch prefix (e.g., MAIN_FUNCTION_URL, DEV_FUNCTION_URL)
          BRANCH_PREFIX=$(echo "$BRANCH_NAME" | tr '[:lower:]' '[:upper:]')

          if [ -n "$FUNCTION_URL" ]; then
            echo "Setting ${BRANCH_PREFIX}_FUNCTION_URL"
            gh variable set "${BRANCH_PREFIX}_FUNCTION_URL" --body "$FUNCTION_URL"
          fi

          if [ -n "$CODEBUILD_PROJECT_NAME" ]; then
            echo "Setting ${BRANCH_PREFIX}_CODEBUILD_PROJECT_NAME"
            gh variable set "${BRANCH_PREFIX}_CODEBUILD_PROJECT_NAME" --body "$CODEBUILD_PROJECT_NAME"
          fi

          if [ -n "$LAMBDA_FUNCTION_NAME" ]; then
            echo "Setting ${BRANCH_PREFIX}_LAMBDA_FUNCTION_NAME"
            gh variable set "${BRANCH_PREFIX}_LAMBDA_FUNCTION_NAME" --body "$LAMBDA_FUNCTION_NAME"
          fi

          if [ -n "$ECR_REPOSITORY_URL" ]; then
            echo "Setting ${BRANCH_PREFIX}_ECR_REPOSITORY_URL"
            gh variable set "${BRANCH_PREFIX}_ECR_REPOSITORY_URL" --body "$ECR_REPOSITORY_URL"
          fi

          echo "✅ Outputs saved as repository variables with prefix: ${BRANCH_PREFIX}_"
          echo "   Access with: gh variable get ${BRANCH_PREFIX}_FUNCTION_URL"
